generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Scene {
  id          Int                  @id @default(autoincrement())
  title       String
  description String
  characters  CharactersOnScenes[]
  nodes       Node[]
}

model Character {
  id          Int                  @id @default(autoincrement())
  name        String
  description String
  scenes      CharactersOnScenes[]
  references  Reference[]
}

model CharactersOnScenes {
  characterId Int
  sceneId     Int
  character   Character @relation(fields: [characterId], references: [id])
  scene       Scene     @relation(fields: [sceneId], references: [id], onDelete: Cascade)

  @@id([characterId, sceneId])
}

model Reference {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  url         String
  characterId Int
  character   Character @relation(fields: [characterId], references: [id])
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tags      String[]
}

// Flow Management

model Node {
  id          Int       @id @default(autoincrement())
  positionX   Float
  positionY   Float
  sceneId     Int?      @unique
  scene       Scene?    @relation(fields: [sceneId], references: [id], onDelete: Cascade)

  outgoing    Edge[]    @relation("FromNode")
  incoming    Edge[]    @relation("ToNode")
  properties  Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Edge {
  id          Int       @id @default(autoincrement())
  fromNode    Node      @relation("FromNode", fields: [fromNodeId], references: [id])
  fromNodeId  Int
  toNode      Node      @relation("ToNode", fields: [toNodeId], references: [id])
  toNodeId    Int
  type        String    @default("default")
  animated    Boolean   @default(false)
  label       String?
  conditions  Json?
  properties  Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([fromNodeId, toNodeId])
}