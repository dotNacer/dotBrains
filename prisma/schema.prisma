generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


//TODO: Utiliser des ids string a la place des ids int
model Scene {
    id String @id @default(cuid())
    name String
    description String
    nodes Node[] @relation("GroupNodes")
    edges Edge[] @relation("GroupEdges")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
    @@index([createdAt])
}

//TODO : Rename scene into Event
model SceneEvent {
  id          String               @id @default(cuid())
  title       String
  description String
  characters  Character[]
  
  // Un SceneEvent DOIT avoir un Node
  nodeId      String               @unique
  node        Node                 @relation(fields: [nodeId], references: [id], onDelete: Cascade)
}
model Character {
  id          String               @id @default(cuid())
  name        String
  description String
  scenes      SceneEvent[]
  references  Reference[]
}

model Reference {
  id          String    @id @default(cuid())
  name        String
  description String
  url         String
  characterId String
  character   Character @relation(fields: [characterId], references: [id])
}

// Flow Management
enum NodeType {
  EVENT
  GROUP
}

model Node {
  id          String    @id @default(cuid())
  type        NodeType
  title       String?

  // Position et taille
  positionX   Float
  positionY   Float
  width       Float
  height      Float

  // Relations
  outgoing    Edge[]    @relation("FromNode")
  incoming    Edge[]    @relation("ToNode")
  
  // Pour les nodes de type EVENT
  sceneEventId     String?      @unique
  sceneEvent       SceneEvent?    // Un Node peut avoir 0 ou 1 SceneEvent

  // Pour les nodes de type GROUP
  parentId    String?
  parent      Node?     @relation("NodeHierarchy", fields: [parentId], references: [id])
  children    Node[]    @relation("NodeHierarchy")

  sceneId     String
  scene       Scene    @relation("GroupNodes", fields: [sceneId], references: [id], onDelete: Cascade)

  properties  Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([type])
  @@index([parentId])
  @@index([sceneId])
  @@index([createdAt])
}

model Edge {
  id          String    @id @default(cuid())
  fromNode    Node      @relation("FromNode", fields: [fromNodeId], references: [id])
  fromNodeId  String
  toNode      Node      @relation("ToNode", fields: [toNodeId], references: [id])
  toNodeId    String
  type        String    @default("default")
  animated    Boolean   @default(false)
  label       String?
  conditions  Json?

  sceneId     String
  scene       Scene    @relation("GroupEdges", fields: [sceneId], references: [id], onDelete: Cascade)

  properties  Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([fromNodeId, toNodeId])
}